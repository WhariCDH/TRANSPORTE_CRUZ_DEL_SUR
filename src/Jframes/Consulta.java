/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Jframes;


import ExpressBus.MongoConnection;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;
import java.lang.reflect.Method;
import org.bson.Document;
import org.bson.types.ObjectId;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Consulta extends javax.swing.JInternalFrame {


    private DefaultTableModel tblModel;
    // Estos componentes son declarados por NetBeans en la sección de variables
    // private javax.swing.JComboBox<String> comboFiltros;
    // private javax.swing.JTextField txtFecha;
    private final String[] TIPOS_CONSULTA = {
        "Boletas emitidas hoy",
        "Boletas por fecha específica",
        "Monto total recaudado hoy",
        "Monto total recaudado por fecha",
        "Total de pasajeros del día",
        "Rutas más populares",
        "Pasajeros por destino",
        "Distribución por modelo de bus",
        "Ingresos por ruta",
        "Métodos de pago más utilizados"
    };
    
    // Datos de muestra para simular la base de datos
    private List<DatosBoleta> boletasDemo;
    
    public Consulta() {
        try {
            // Primero inicializar los componentes de Swing generados por NetBeans
            initComponents();
            
            // Verificar que los componentes se hayan inicializado correctamente
            if (txtFecha == null) {
                System.out.println("Error: txtFecha es null después de initComponents()");
                // Crear el componente manualmente si es necesario
                txtFecha = new javax.swing.JTextField();
            }
            
            if (cmbFiltro == null) {
                System.out.println("Error: cmbFiltro es null después de initComponents()");
                // Crear el componente manualmente si es necesario
                cmbFiltro = new javax.swing.JComboBox<>();
            }
            
            // Intentar inicializar la conexión a MongoDB
            initMongoConnection();
            
            // Mostramos un mensaje para informar al usuario sobre MongoDB
            System.out.println("Intentando conectar con MongoDB Atlas...");
            if (mongoConnection == null) {
                System.out.println("No se pudo conectar con MongoDB Atlas. Funcionando con datos simulados.");
            } else {
                System.out.println("Conexión con MongoDB Atlas establecida correctamente.");
            }
            
            // Luego cargar datos de muestra
            cargarDatosDemostrativos();
            
            // Configurar componentes adicionales
            setupComponents();
            
            // Inicializar la tabla
            initTable();
            
            // Asegurarse de que sea visible y se pueda maximizar
            this.setVisible(true);
            this.setMaximizable(true);
            this.setClosable(true);
            this.setIconifiable(true);
            this.setResizable(true);
        } catch (Exception e) {
            System.out.println("Error al inicializar Consulta: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRegister = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btonEliminar = new javax.swing.JButton();
        btonEliminarTodo = new javax.swing.JButton();
        cmbFiltro = new javax.swing.JComboBox<>();
        txtFecha = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("Consulta");
        setPreferredSize(new java.awt.Dimension(900, 500));

        jPanel2.setLayout(new java.awt.CardLayout());

        tblRegister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegisterMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRegister);

        jPanel2.add(jScrollPane2, "card2");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/loupe.png"))); // NOI18N
        jButton1.setText("Buscar");

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 13)); // NOI18N
        jLabel1.setText("Filtrar:");

        btonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cross.png"))); // NOI18N
        btonEliminar.setText("Anular");
        btonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonEliminarActionPerformed(evt);
            }
        });

        btonEliminarTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/printer.png"))); // NOI18N
        btonEliminarTodo.setText("Ver");
        btonEliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonEliminarTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtFecha))
                            .addComponent(cmbFiltro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(30, 30, 30)
                        .addComponent(btonEliminarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(133, 133, 133))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btonEliminarTodo)
                                .addComponent(btonEliminar))
                            .addComponent(jButton1))
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblRegisterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegisterMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tblRegisterMouseClicked

    private void btonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonEliminarActionPerformed
        // TODO add your handling code here:
         // Exportar a PDF o Excel (implementación futura)
        JOptionPane.showMessageDialog(this, "Funcionalidad de exportación pendiente de implementar.");
    }//GEN-LAST:event_btonEliminarActionPerformed

    private void btonEliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonEliminarTodoActionPerformed
                // Ver detalles completos
        mostrarDetallesSeleccion();
    }//GEN-LAST:event_btonEliminarTodoActionPerformed
    //******************************
    
    /**
     * Clase para datos de boleta según la estructura real de la base de datos
     */
    private static class DatosBoleta {
        private final String id;
        private final String nombrePasajero;
        private final String modeloBus;
        private final String ruta;
        private final String metodoPago;
        private final double precioPorAsiento;
        private final double costoEquipaje;
        private final double total;
        private final int cantidadAsientos;
        private final int cantidadEquipaje;
        private final String dni;
        private final String telefono;
        private final String correo;
        private final Date fecha;
        private final int tiempoViaje;
        
        public DatosBoleta(String id, String nombrePasajero, String modeloBus, String ruta,
                String metodoPago, double precioPorAsiento, double costoEquipaje, 
                double total, int cantidadAsientos, int cantidadEquipaje,
                String dni, String telefono, String correo, Date fecha, int tiempoViaje) {
            this.id = id;
            this.nombrePasajero = nombrePasajero;
            this.modeloBus = modeloBus;
            this.ruta = ruta;
            this.metodoPago = metodoPago;
            this.precioPorAsiento = precioPorAsiento;
            this.costoEquipaje = costoEquipaje;
            this.total = total;
            this.cantidadAsientos = cantidadAsientos;
            this.cantidadEquipaje = cantidadEquipaje;
            this.dni = dni;
            this.telefono = telefono;
            this.correo = correo;
            this.fecha = fecha;
            this.tiempoViaje = tiempoViaje;
        }
    }
    
    // Referencia a la conexión MongoDB
    private MongoConnection mongoConnection;
    
    /**
     * Inicializa la conexión a MongoDB
     */
    private void initMongoConnection() {
        try {
            // Obtener la instancia singleton de la conexión MongoDB
            mongoConnection = MongoConnection.getInstance();
            System.out.println("Conexión a MongoDB establecida correctamente");
        } catch (Exception e) {
            System.err.println("Error al conectar con MongoDB: " + e.getMessage());
            JOptionPane.showMessageDialog(this, 
                "Error al conectar con la base de datos MongoDB. Algunas funciones pueden no estar disponibles.", 
                "Error de conexión", JOptionPane.WARNING_MESSAGE);
            // No propagamos la excepción para que la aplicación siga funcionando
        }
    }
    
    /**
     * Consulta boletas desde MongoDB utilizando la conexión establecida
     * @return Lista de boletas obtenidas de la base de datos
     */
    /**
     * Consulta la colección "boletas_reserva" en MongoDB para obtener los datos de boletas
     * Usa reflection para evitar dependencias directas con los tipos de MongoDB
     * 
     * @return Lista de objetos DatosBoleta con la información recuperada de MongoDB
     */
    private List<DatosBoleta> consultarBoletasDesdeMongoDB() {
    List<DatosBoleta> resultado = new ArrayList<>();
    
    try {
        // Inicializar conexión a MongoDB si es necesario
        if (mongoConnection == null) {
            mongoConnection = MongoConnection.getInstance();
            if (mongoConnection == null) {
                System.out.println("No se pudo establecer conexión con MongoDB");
                JOptionPane.showMessageDialog(this, 
                    "No se pudo conectar con MongoDB.\nVerifique su conexión a internet.",
                    "Error de conexión", 
                    JOptionPane.ERROR_MESSAGE);
                return resultado;
            }
        }
        
        System.out.println("Consultando boletas desde MongoDB...");
        
        // Obtener la colección
        MongoCollection<Document> collection = mongoConnection.getCollection("boletas_reserva");
        
        // Realizar consulta find() sin filtros
        FindIterable<Document> findResult = collection.find();
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
        int contadorBoletas = 0;
        
        // Procesar cada documento retornado
        for (Document doc : findResult) {
            try {
                contadorBoletas++;
                
                // Obtener campos como Objects primero
                ObjectId objectId = doc.getObjectId("_id");
                String id = objectId != null ? objectId.toString() : "";
                
                // Campos de texto - usar toString() con validación null
                Object nombrePasajeroObj = doc.get("nombrePasajero");
                Object modeloBusObj = doc.get("modeloBus");
                Object rutaObj = doc.get("ruta");
                Object metodoPagoObj = doc.get("metodoPago");
                Object dniObj = doc.get("dni");
                Object telefonoObj = doc.get("telefono");
                Object correoObj = doc.get("correo");
                
                String nombrePasajero = nombrePasajeroObj != null ? nombrePasajeroObj.toString() : "";
                String modeloBus = modeloBusObj != null ? modeloBusObj.toString() : "";
                String ruta = rutaObj != null ? rutaObj.toString() : "";
                String metodoPago = metodoPagoObj != null ? metodoPagoObj.toString() : "";
                String dni = dniObj != null ? dniObj.toString() : "";
                String telefono = telefonoObj != null ? telefonoObj.toString() : "";
                String correo = correoObj != null ? correoObj.toString() : "";
                
                // Campos numéricos - conversión segura
                double precioPorAsiento = getDoubleValue(doc.get("precioPorAsiento"));
                double costoEquipaje = getDoubleValue(doc.get("costoEquipaje"));
                double total = getDoubleValue(doc.get("total"));
                int cantidadAsientos = getIntValue(doc.get("cantidadAsientos"));
                int cantidadEquipaje = getIntValue(doc.get("cantidadEquipaje"));
                int tiempoViaje = getIntValue(doc.get("tiempoViaje"));
                
                // Procesar fecha
                Date fecha = new Date(); // valor por defecto
                Object fechaObj = doc.get("fecha");
                if (fechaObj != null) {
                    if (fechaObj instanceof Date) {
                        fecha = (Date) fechaObj;
                    } else {
                        try {
                            fecha = sdf.parse(fechaObj.toString());
                        } catch (ParseException e) {
                            System.out.println("Error al parsear fecha: " + e.getMessage());
                        }
                    }
                }
                
                // Crear objeto DatosBoleta
                DatosBoleta boleta = new DatosBoleta(id, nombrePasajero, modeloBus, 
                    ruta, metodoPago, precioPorAsiento, costoEquipaje, total,
                    cantidadAsientos, cantidadEquipaje, dni, telefono, correo, 
                    fecha, tiempoViaje);
                
                resultado.add(boleta);
                
            } catch (Exception e) {
                System.out.println("Error al procesar un documento de MongoDB: " + e.getMessage());
                continue; // Continuar con el siguiente documento
            }
        }
        
        System.out.println("Datos de MongoDB obtenidos correctamente: " + contadorBoletas + " boletas encontradas");
        
        if (resultado.isEmpty()) {
            System.out.println("No se encontraron boletas en la colección boletas_reserva");
        }
        
    } catch (Exception e) {
        System.out.println("Error al consultar MongoDB: " + e.getMessage());
        JOptionPane.showMessageDialog(this,
            "No se pudieron cargar datos desde MongoDB\n" +
            "Verifique la conexión a Internet y que la base de datos esté disponible",
            "Error de conexión",
            JOptionPane.ERROR_MESSAGE);
    }
    
    return resultado;
}

// Métodos auxiliares para conversión segura de tipos
private double getDoubleValue(Object obj) {
    if (obj == null) return 0.0;
    try {
        if (obj instanceof Number) {
            return ((Number) obj).doubleValue();
        }
        return Double.parseDouble(obj.toString());
    } catch (Exception e) {
        System.out.println("Error al convertir a double: " + e.getMessage());
        return 0.0;
    }
}

private int getIntValue(Object obj) {
    if (obj == null) return 0;
    try {
        if (obj instanceof Number) {
            return ((Number) obj).intValue();
        }
        return Integer.parseInt(obj.toString());
    } catch (Exception e) {
        System.out.println("Error al convertir a int: " + e.getMessage());
        return 0;
    }
}
    /**
     * Método auxiliar para crear boletas de ejemplo desde datos que simularían venir de MongoDB
     */
    private DatosBoleta crearBoletaEjemplo(String id, String nombrePasajero, String modeloBus, 
            String ruta, String metodoPago, double precioPorAsiento, double costoEquipaje, 
            double total, int cantidadAsientos, int cantidadEquipaje, String dni, 
            String telefono, String correo, String fechaStr, int tiempoViaje) {
        
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
            Date fecha = sdf.parse(fechaStr);
            
            return new DatosBoleta(id, nombrePasajero, modeloBus, ruta, metodoPago,
                    precioPorAsiento, costoEquipaje, total, cantidadAsientos, cantidadEquipaje,
                    dni, telefono, correo, fecha, tiempoViaje);
        } catch (ParseException e) {
            System.err.println("Error al parsear fecha: " + e.getMessage());
            return new DatosBoleta(id, nombrePasajero, modeloBus, ruta, metodoPago,
                    precioPorAsiento, costoEquipaje, total, cantidadAsientos, cantidadEquipaje,
                    dni, telefono, correo, new Date(), tiempoViaje);
        }
    }
    
    /**
     * Carga datos directamente desde MongoDB
     * Usando las colecciones "boletas_reserva" y "rutas"
     */
    private void cargarDatosDemostrativos() {
        boletasDemo = new ArrayList<>();
        
        try {
            // Intentamos cargar datos reales desde MongoDB
            List<DatosBoleta> boletasMongoDB = consultarBoletasDesdeMongoDB();
            
            // Agregamos los datos obtenidos de MongoDB
            if (!boletasMongoDB.isEmpty()) {
                System.out.println("Usando datos reales de MongoDB: " + boletasMongoDB.size() + " boletas encontradas");
                boletasDemo.addAll(boletasMongoDB);
            } else {
                System.out.println("No se pudieron cargar datos desde MongoDB. Verifique la conexión.");
                // No agregamos datos simulados, solo mostramos un mensaje informativo
                JOptionPane.showMessageDialog(this, 
                    "No se pudieron cargar datos desde MongoDB.\n" +
                    "Verifique la conexión a Internet y que la base de datos esté disponible.", 
                    "Error de conexión", JOptionPane.WARNING_MESSAGE);
            }
            
            // Añadimos datos de días anteriores
            addPastDaysBoletas();
        } catch (Exception e) {
            System.out.println("Error al cargar datos demostrativos: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Método auxiliar para añadir una boleta con los datos completos
     */
    private void addRutaBoleta(String id, String nombrePasajero, String modeloBus, 
            String ruta, String metodoPago, double precioPorAsiento, 
            double costoEquipaje, double total, int cantidadAsientos, 
            int cantidadEquipaje, String dni, String telefono, 
            String correo, String fechaStr, int tiempoViaje) {
        
        try {
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
            Date fecha = formatter.parse(fechaStr);
            
            boletasDemo.add(new DatosBoleta(
                id, nombrePasajero, modeloBus, ruta, metodoPago,
                precioPorAsiento, costoEquipaje, total, cantidadAsientos,
                cantidadEquipaje, dni, telefono, correo, fecha, tiempoViaje
            ));
        } catch (Exception e) {
            System.out.println("Error al añadir boleta: " + e.getMessage());
        }
    }
    
    /**
     * Añade boletas de días anteriores para tener datos históricos coherentes con la estructura
     * de las colecciones "boletas_reserva" y "rutas" mostradas en las capturas
     */
    /**
     * Consulta rutas directamente desde MongoDB
     */
    private List<String> consultarRutasDesdeMongoDB() {
        List<String> rutas = new ArrayList<>();
        
        try {
            if (mongoConnection == null) {
                System.out.println("No hay conexión a MongoDB para consultar rutas");
                return rutas;
            }
            
            System.out.println("Consultando rutas desde MongoDB...");
            
            // Obtener la base de datos y colección
            Object db = mongoConnection.getDatabase();
            
            // Usando reflection para evitar dependencias directas
            Method getCollectionMethod = db.getClass().getMethod("getCollection", String.class);
            Object collection = getCollectionMethod.invoke(db, "rutas");
            
            // Realizar consulta
            Method findMethod = collection.getClass().getMethod("find");
            Object findIterable = findMethod.invoke(collection);
            
            // Obtener iterable
            Method iteratorMethod = findIterable.getClass().getMethod("iterator");
            Iterator<?> iterator = (Iterator<?>) iteratorMethod.invoke(findIterable);
            
            // Procesar resultados
            while (iterator.hasNext()) {
                Object doc = iterator.next();
                
                // Extraer datos usando reflection
                Method getStringMethod = doc.getClass().getMethod("getString", String.class);
                
                // Extraer nombre de ruta
                String nombreRuta = (String) getStringMethod.invoke(doc, "nombre");
                rutas.add(nombreRuta);
            }
            
            System.out.println("Rutas de MongoDB obtenidas correctamente: " + rutas.size() + " rutas encontradas");
            return rutas;
        } catch (Exception e) {
            System.err.println("Error al consultar rutas desde MongoDB: " + e.getMessage());
            e.printStackTrace();
            return rutas;
        }
    }

    /**
     * Consulta boletas de días anteriores directamente desde MongoDB
     */
    private void addPastDaysBoletas() {
        try {
            System.out.println("Consultando boletas históricas desde MongoDB...");
            
            if (mongoConnection != null) {
                // Dado que ya tenemos consultarBoletasDesdeMongoDB() que trae todas las boletas,
                // ya incluirá las históricas, por lo que no necesitamos hacer nada más aquí
                System.out.println("Las boletas históricas ya se incluyen en la consulta principal a MongoDB");
            } else {
                System.out.println("No hay conexión a MongoDB para consultar boletas históricas");
            }
        } catch (Exception e) {
            System.out.println("Error al consultar boletas históricas: " + e.getMessage());
        }
    }
    
    /**
     * Método auxiliar para obtener la fecha ingresada
     * @return La fecha ingresada como texto, o la fecha actual si hay error
     */
    private String obtenerTextoFecha() {
        try {
            if (txtFecha != null) {
                String texto = txtFecha.getText();
                if (texto != null && !texto.isEmpty()) {
                    return texto;
                }
            }
        } catch (Exception e) {
            System.out.println("Error al obtener texto de fecha: " + e.getMessage());
        }
        // Valor por defecto
        return new SimpleDateFormat("dd/MM/yyyy").format(new Date());
    }
    
    /**
     * Inicializa los componentes personalizados de la ventana
     */
    private void setupComponents() {
        try {
            // Configurar combobox
            if (cmbFiltro != null) {
                cmbFiltro.setModel(new DefaultComboBoxModel<>(TIPOS_CONSULTA));
            } else {
                System.out.println("Error: cmbFiltro es null");
            }
            
            // Configurar el campo de fecha con formato DD/MM/AAAA
            try {
                if (txtFecha != null) {
                    txtFecha.setToolTipText("Ingrese la fecha en formato DD/MM/AAAA");
                    txtFecha.setText(new SimpleDateFormat("dd/MM/yyyy").format(new Date()));
                } else {
                    System.out.println("Error: txtFecha es null");
                }
            } catch (Exception ex) {
                System.out.println("Error al configurar txtFecha: " + ex.getMessage());
            }
            
            // Cambiar textos de botones
            btonEliminarTodo.setText("Ver Detalles");
            btonEliminarTodo.setToolTipText("Ver detalles de la consulta seleccionada");
            
            btonEliminar.setText("Exportar");
            btonEliminar.setToolTipText("Exportar resultados a PDF");
            
            // Configurar acción del botón de búsqueda
            jButton1.addActionListener(evt -> ejecutarConsulta());
        } catch (Exception e) {
            System.out.println("Error en setupComponents: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Inicializa la tabla con las columnas adecuadas
     */
    private void initTable() {
        // Crear modelo con columnas apropiadas
        String[] columnas = {"ID", "Descripción", "Valor", "Detalle"};
        tblModel = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        // Asignar modelo a la tabla
        tblRegister.setModel(tblModel);
        
        // Ajustar ancho de columnas
        if (tblRegister.getColumnModel().getColumnCount() > 0) {
            tblRegister.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblRegister.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblRegister.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblRegister.getColumnModel().getColumn(3).setPreferredWidth(350);
        }
    }
    
    /**
     * Ejecuta la consulta seleccionada en el ComboBox
     */
    private void ejecutarConsulta() {
        int seleccion = cmbFiltro.getSelectedIndex();
        tblModel.setRowCount(0); // Limpia la tabla
        
        // Intentar actualizar datos desde MongoDB antes de ejecutar la consulta
        if (mongoConnection != null) {
            // Aquí podríamos volver a cargar datos si fuera necesario
            // List<DatosBoleta> boletasActualizadas = consultarBoletasDesdeMongoDB();
            // if (!boletasActualizadas.isEmpty()) {
            //     boletasDemo = boletasActualizadas;
            // }
            System.out.println("Ejecutando consulta con posible conexión a MongoDB...");
        }
        
        try {
            switch (seleccion) {
                case 0: // Boletas emitidas hoy
                    consultarBoletasHoy();
                    break;
                case 1: // Boletas por fecha específica
                    consultarBoletasPorFecha(obtenerTextoFecha());
                    break;
                case 2: // Monto total recaudado hoy
                    consultarMontoTotalHoy();
                    break;
                case 3: // Monto total recaudado por fecha
                    consultarMontoPorFecha(obtenerTextoFecha());
                    break;
                case 4: // Total de pasajeros del día
                    consultarPasajerosHoy();
                    break;
                case 5: // Rutas más populares
                    consultarRutasPopulares();
                    break;
                case 6: // Pasajeros por destino
                    consultarPasajerosPorDestino();
                    break;
                case 7: // Distribución por modelo de bus
                    consultarDistribucionBuses();
                    break;
                case 8: // Ingresos por ruta
                    consultarIngresosPorRuta();
                    break;
                case 9: // Métodos de pago más utilizados
                    consultarMetodosPago();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Seleccione una opción de consulta válida");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al realizar la consulta: " + ex.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    /**
     * Muestra detalles adicionales de la consulta seleccionada
     */
    private void mostrarDetallesSeleccion() {
        int fila = tblRegister.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un registro para ver detalles");
            return;
        }
        
        // Mostrar información detallada según la consulta
        String id = tblModel.getValueAt(fila, 0).toString();
        String descripcion = tblModel.getValueAt(fila, 1).toString();
        String valor = tblModel.getValueAt(fila, 2).toString();
        String detalle = tblModel.getValueAt(fila, 3).toString();
        
        StringBuilder mensaje = new StringBuilder();
        mensaje.append("DETALLE DE CONSULTA\n");
        mensaje.append("=========================\n\n");
        mensaje.append("ID: ").append(id).append("\n");
        mensaje.append("Descripción: ").append(descripcion).append("\n");
        mensaje.append("Valor: ").append(valor).append("\n");
        mensaje.append("Detalle: ").append(detalle).append("\n");
        
        JOptionPane.showMessageDialog(this, mensaje.toString(), "Detalle de Consulta", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Consulta las boletas emitidas hoy
     */
    /**
     * Intenta consultar las boletas de hoy usando MongoDB si está disponible
     * De lo contrario, utiliza los datos de demostración
     */
    private void consultarBoletasHoy() {
    tblModel.setRowCount(0); // Limpiar tabla

    // Obtener fecha de hoy
    Calendar cal = Calendar.getInstance();
    cal.set(Calendar.HOUR_OF_DAY, 0);
    cal.set(Calendar.MINUTE, 0);
    cal.set(Calendar.SECOND, 0);
    cal.set(Calendar.MILLISECOND, 0);
    Date inicioHoy = cal.getTime();

    cal.set(Calendar.HOUR_OF_DAY, 23);
    cal.set(Calendar.MINUTE, 59);
    cal.set(Calendar.SECOND, 59);
    cal.set(Calendar.MILLISECOND, 999);
    Date finHoy = cal.getTime();

    String fechaHoyStr = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
    int contador = 0;
    double totalVentas = 0;

    try {
        if (boletasDemo == null || boletasDemo.isEmpty()) {
            tblModel.addRow(new Object[]{
                "N/A",
                "No hay datos disponibles",
                "Verifique la conexión a MongoDB",
                "No se encontraron boletas en la base de datos"
            });
            return;
        }

        // Si en el futuro se usa MongoDB real, aquí vendría la lógica
        if (mongoConnection != null) {
            try {
                // Simulación futura
                JOptionPane.showMessageDialog(this,
                        "La consulta con MongoDB no está disponible aún. Se mostrarán datos de demostración.",
                        "Información", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception mongoEx) {
                System.err.println("Error al consultar MongoDB: " + mongoEx.getMessage());
            }
        }

        // Usar datos de demostración
        for (DatosBoleta boleta : boletasDemo) {
            if (!boleta.fecha.before(inicioHoy) && !boleta.fecha.after(finHoy)) {
                contador++;
                totalVentas += boleta.total;

                tblModel.addRow(new Object[]{
                    contador,
                    "Boleta: " + boleta.nombrePasajero,
                    "S/ " + String.format("%.2f", boleta.total),
                    "Ruta: " + boleta.ruta + " | Bus: " + boleta.modeloBus
                });
            }
        }

        // Si no hubo resultados
        if (contador == 0) {
            tblModel.addRow(new Object[]{
                "N/A",
                "No se encontraron boletas para hoy",
                "S/ 0.00",
                "Fecha: " + fechaHoyStr
            });
        }

        // Agregar resumen
        tblModel.addRow(new Object[]{
                "TOTAL",
                "Boletas emitidas: " + contador,
                "S/ " + String.format("%.2f", totalVentas),
                "Fecha: " + fechaHoyStr
        });

    } catch (Exception e) {
        tblModel.addRow(new Object[]{
            "ERROR",
            "Error al consultar boletas",
            "S/ 0.00",
            "Error: " + e.getMessage()
        });
    }
}
    
    /**
     * Consulta las boletas emitidas en una fecha específica
     */
    private void consultarBoletasPorFecha(String fechaStr) {
        // Limpiar la tabla primero
        tblModel.setRowCount(0);
        
        try {
            // Parsear fecha
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Date fecha = sdf.parse(fechaStr);
            
            // Configurar inicio y fin de día
            Calendar cal = Calendar.getInstance();
            cal.setTime(fecha);
            cal.set(Calendar.HOUR_OF_DAY, 0);
            cal.set(Calendar.MINUTE, 0);
            cal.set(Calendar.SECOND, 0);
            Date inicioDia = cal.getTime();
            
            cal.set(Calendar.HOUR_OF_DAY, 23);
            cal.set(Calendar.MINUTE, 59);
            cal.set(Calendar.SECOND, 59);
            Date finDia = cal.getTime();
            
            // Verificar si tenemos datos cargados
            if (boletasDemo == null || boletasDemo.isEmpty()) {
                System.out.println("No hay datos cargados para consultar boletas por fecha");
                tblModel.addRow(new Object[] {
                    "N/A", 
                    "No hay datos disponibles", 
                    "Verifique la conexión a MongoDB", 
                    "No se encontraron boletas en la base de datos"
                });
                return;
            }
            
            int contador = 0;
            double totalVentas = 0;
            
            for (DatosBoleta boleta : boletasDemo) {
                if (boleta.fecha.after(inicioDia) && boleta.fecha.before(finDia)) {
                    contador++;
                    totalVentas += boleta.total;
                    
                    // Agregar a la tabla
                    Object[] fila = {
                        contador,
                        "Boleta: " + boleta.nombrePasajero,
                        "S/ " + String.format("%.2f", boleta.total),
                        "Ruta: " + boleta.ruta + " | Bus: " + boleta.modeloBus
                    };
                    tblModel.addRow(fila);
                }
            }
            
            // Si no hay resultados, mostrar mensaje
            if (contador == 0) {
                tblModel.addRow(new Object[] {
                    "N/A", 
                    "No se encontraron boletas para la fecha", 
                    "S/ 0.00", 
                    "Fecha: " + fechaStr
                });
            }
            
            // Agregar resumen
            Object[] resumen = {
                "TOTAL",
                "Boletas emitidas: " + contador,
                "S/ " + String.format("%.2f", totalVentas),
                "Fecha: " + fechaStr
            };
            tblModel.addRow(resumen);
            
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Use DD/MM/AAAA: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Consulta el monto total recaudado hoy
     */
    private void consultarMontoTotalHoy() {
        // Limpiar la tabla primero
        tblModel.setRowCount(0);
        
        try {
        // Obtener fecha de hoy (inicio y fin)
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        Date inicioHoy = cal.getTime();
        
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        Date finHoy = cal.getTime();
        
        // Verificar si tenemos datos cargados
        if (boletasDemo == null || boletasDemo.isEmpty()) {
            System.out.println("No hay datos cargados para consultar montos de hoy");
            tblModel.addRow(new Object[] {
                "N/A", 
                "No hay datos disponibles", 
                "Verifique la conexión a MongoDB", 
                "No se encontraron boletas en la base de datos"
            });
            return;
        }
        
        Map<String, Double> totalPorMetodo = new HashMap<>();
        Map<String, Integer> boletasPorMetodo = new HashMap<>();
        
        for (DatosBoleta boleta : boletasDemo) {
            if (boleta.fecha.after(inicioHoy) && boleta.fecha.before(finHoy)) {
                String metodoPago = boleta.metodoPago;
                
                // Actualizar contadores
                totalPorMetodo.put(metodoPago, totalPorMetodo.getOrDefault(metodoPago, 0.0) + boleta.total);
                boletasPorMetodo.put(metodoPago, boletasPorMetodo.getOrDefault(metodoPago, 0) + 1);
            }
        }
        
        // Mostrar resultados en la tabla
        double granTotal = 0;
        int totalBoletas = 0;
        int contador = 0;
        
        for (Map.Entry<String, Double> entry : totalPorMetodo.entrySet()) {
            contador++;
            String metodoPago = entry.getKey();
            double totalPorMetodoValor = entry.getValue();
            int cantidadBoletas = boletasPorMetodo.get(metodoPago);
            
            granTotal += totalPorMetodoValor;
            totalBoletas += cantidadBoletas;
            
            Object[] fila = {
                contador,
                "Método: " + metodoPago,
                "S/ " + String.format("%.2f", totalPorMetodoValor),
                "Cantidad de boletas: " + cantidadBoletas
            };
            tblModel.addRow(fila);
        }
        
        // Si no hay resultados, mostrar mensaje
        if (contador == 0) {
            tblModel.addRow(new Object[] {
                "N/A", 
                "No se encontraron boletas para hoy", 
                "S/ 0.00", 
                "Fecha: " + new SimpleDateFormat("dd/MM/yyyy").format(new Date())
            });
        }
        
        // Agregar resumen
        Object[] resumen = {
            "TOTAL",
            "Fecha: " + new SimpleDateFormat("dd/MM/yyyy").format(new Date()),
            "S/ " + String.format("%.2f", granTotal),
            "Total de boletas: " + totalBoletas
        };
        tblModel.addRow(resumen);
        } catch (Exception e) {
            tblModel.addRow(new Object[] {
                "ERROR",
                "Error al consultar montos",
                "S/ 0.00",
                "Error: " + e.getMessage()
            });
        }
    }
    
    /**
     * Consulta el monto total recaudado por fecha
     */
    private void consultarMontoPorFecha(String fechaStr) {
        try {
            // Parsear fecha
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Date fecha = sdf.parse(fechaStr);
            
            // Configurar inicio y fin de día
            Calendar cal = Calendar.getInstance();
            cal.setTime(fecha);
            cal.set(Calendar.HOUR_OF_DAY, 0);
            cal.set(Calendar.MINUTE, 0);
            cal.set(Calendar.SECOND, 0);
            Date inicioDia = cal.getTime();
            
            cal.set(Calendar.HOUR_OF_DAY, 23);
            cal.set(Calendar.MINUTE, 59);
            cal.set(Calendar.SECOND, 59);
            Date finDia = cal.getTime();
            
            Map<String, Double> totalPorMetodo = new HashMap<>();
            Map<String, Integer> boletasPorMetodo = new HashMap<>();
            
            for (DatosBoleta boleta : boletasDemo) {
                if (boleta.fecha.after(inicioDia) && boleta.fecha.before(finDia)) {
                    String metodoPago = boleta.metodoPago;
                    
                    // Actualizar contadores
                    totalPorMetodo.put(metodoPago, totalPorMetodo.getOrDefault(metodoPago, 0.0) + boleta.total);
                    boletasPorMetodo.put(metodoPago, boletasPorMetodo.getOrDefault(metodoPago, 0) + 1);
                }
            }
            
            // Mostrar resultados en la tabla
            double granTotal = 0;
            int totalBoletas = 0;
            int contador = 0;
            
            for (Map.Entry<String, Double> entry : totalPorMetodo.entrySet()) {
                contador++;
                String metodoPago = entry.getKey();
                double totalPorMetodoValor = entry.getValue();
                int cantidadBoletas = boletasPorMetodo.get(metodoPago);
                
                granTotal += totalPorMetodoValor;
                totalBoletas += cantidadBoletas;
                
                Object[] fila = {
                    contador,
                    "Método: " + metodoPago,
                    "S/ " + String.format("%.2f", totalPorMetodoValor),
                    "Cantidad de boletas: " + cantidadBoletas
                };
                tblModel.addRow(fila);
            }
            
            // Agregar resumen
            Object[] resumen = {
                "TOTAL",
                "Fecha: " + fechaStr,
                "S/ " + String.format("%.2f", granTotal),
                "Total de boletas: " + totalBoletas
            };
            tblModel.addRow(resumen);
            
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Use DD/MM/AAAA: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Consulta el total de pasajeros del día
     */
    private void consultarPasajerosHoy() {
        // Limpiar la tabla primero
        tblModel.setRowCount(0);
        
        try {
            // Obtener fecha de hoy (inicio y fin)
            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.HOUR_OF_DAY, 0);
            cal.set(Calendar.MINUTE, 0);
            cal.set(Calendar.SECOND, 0);
            Date inicioHoy = cal.getTime();
            
            cal.set(Calendar.HOUR_OF_DAY, 23);
            cal.set(Calendar.MINUTE, 59);
            cal.set(Calendar.SECOND, 59);
            Date finHoy = cal.getTime();
        
        Map<String, Integer> pasajerosPorRuta = new HashMap<>();
        Map<String, Integer> boletasPorRuta = new HashMap<>();
        
        for (DatosBoleta boleta : boletasDemo) {
            if (boleta.fecha.after(inicioHoy) && boleta.fecha.before(finHoy)) {
                String ruta = boleta.ruta;
                
                // Actualizar contadores
                pasajerosPorRuta.put(ruta, pasajerosPorRuta.getOrDefault(ruta, 0) + boleta.cantidadAsientos);
                boletasPorRuta.put(ruta, boletasPorRuta.getOrDefault(ruta, 0) + 1);
            }
        }
        
        // Mostrar resultados en la tabla
        int totalPasajeros = 0;
        int totalBoletas = 0;
        int contador = 0;
        
        for (Map.Entry<String, Integer> entry : pasajerosPorRuta.entrySet()) {
            contador++;
            String ruta = entry.getKey();
            int pasajeros = entry.getValue();
            int boletas = boletasPorRuta.get(ruta);
            
            totalPasajeros += pasajeros;
            totalBoletas += boletas;
            
            Object[] fila = {
                contador,
                "Ruta: " + ruta,
                pasajeros + " pasajeros",
                "Cantidad de boletas: " + boletas
            };
            tblModel.addRow(fila);
        }
        
        // Agregar resumen
        Object[] resumen = {
            "TOTAL",
            "Fecha: " + new SimpleDateFormat("dd/MM/yyyy").format(new Date()),
            totalPasajeros + " pasajeros",
            "Total de boletas: " + totalBoletas
        };
        tblModel.addRow(resumen);
        } catch (Exception e) {
            tblModel.addRow(new Object[] {
                "ERROR",
                "Error al consultar pasajeros",
                "0 pasajeros",
                "Error: " + e.getMessage()
            });
        }
    }
    
    /**
     * Consulta las rutas más populares
     * Esta consulta muestra cuáles son las rutas con más pasajeros en todo el historial
     */
    private void consultarRutasPopulares() {
        // Limpiar la tabla primero
        tblModel.setRowCount(0);
        
        // Crear mapas para almacenar estadísticas
        Map<String, Integer> pasajerosPorRuta = new HashMap<>();
        Map<String, Integer> boletasPorRuta = new HashMap<>();
        
        try {
            // Verificar si tenemos conexión a MongoDB y datos cargados
            if (boletasDemo == null || boletasDemo.isEmpty()) {
                System.out.println("No hay datos cargados para consultar rutas populares");
                tblModel.addRow(new Object[] {
                    "N/A", 
                    "No hay datos disponibles", 
                    "Verifique la conexión a MongoDB", 
                    "No se encontraron boletas en la base de datos"
                });
                return;
            }
            
            // Procesamos cada boleta para contar pasajeros y boletas por ruta
            for (DatosBoleta boleta : boletasDemo) {
                String ruta = boleta.ruta;
                
                // Actualizar contadores
                pasajerosPorRuta.put(ruta, pasajerosPorRuta.getOrDefault(ruta, 0) + boleta.cantidadAsientos);
                boletasPorRuta.put(ruta, boletasPorRuta.getOrDefault(ruta, 0) + 1);
            }
            
            // Ordenar por cantidad de pasajeros (convertir a lista para ordenar)
            List<Map.Entry<String, Integer>> listaOrdenada = new ArrayList<>(pasajerosPorRuta.entrySet());
            listaOrdenada.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue())); // Orden descendente
            
            // Mostrar resultados en la tabla
            int totalPasajeros = 0;
            int totalBoletas = 0;
            int contador = 0;
            
            for (Map.Entry<String, Integer> entry : listaOrdenada) {
                contador++;
                String ruta = entry.getKey();
                int pasajeros = entry.getValue();
                int boletas = boletasPorRuta.get(ruta);
                
                totalPasajeros += pasajeros;
                totalBoletas += boletas;
                
                String popularidad;
                if (contador <= 3) {
                    popularidad = "Alta";
                } else if (contador <= 6) {
                    popularidad = "Media";
                } else {
                    popularidad = "Baja";
                }
                
                Object[] fila = {
                    contador,
                    "Ruta: " + ruta,
                    pasajeros + " pasajeros",
                    "Popularidad: " + popularidad + " | Boletas: " + boletas
                };
                tblModel.addRow(fila);
                
                // Limitamos a mostrar las 10 rutas más populares
                if (contador >= 10) {
                    break;
                }
            }
            
            // Si no hay resultados, mostrar mensaje
            if (contador == 0) {
                tblModel.addRow(new Object[] {
                    "N/A", 
                    "No se encontraron rutas", 
                    "0 pasajeros", 
                    "No hay datos de boletas disponibles"
                });
            }
            
            // Agregar resumen
            Object[] resumen = {
                "TOTAL",
                listaOrdenada.size() + " rutas analizadas",
                totalPasajeros + " pasajeros",
                "Total boletas: " + totalBoletas + " | Periodo: Histórico completo"
            };
            tblModel.addRow(resumen);
            
        } catch (Exception e) {
            System.err.println("Error al consultar rutas populares: " + e.getMessage());
            e.printStackTrace();
            tblModel.addRow(new Object[] {
                "Error", 
                "Error al procesar datos", 
                e.getMessage(), 
                "Revise la conexión a MongoDB"
            });
        }
    }
    
    /**
     * Consulta pasajeros por destino
     */
    private void consultarPasajerosPorDestino() {
        // Limpiar la tabla primero
        tblModel.setRowCount(0);
        
        try {
            Map<String, Integer> pasajerosPorDestino = new HashMap<>();
            Map<String, Integer> boletasPorDestino = new HashMap<>();
            
            // Verificar si tenemos datos cargados
            if (boletasDemo == null || boletasDemo.isEmpty()) {
                System.out.println("No hay datos cargados para consultar pasajeros por destino");
                tblModel.addRow(new Object[] {
                    "N/A", 
                    "No hay datos disponibles", 
                    "Verifique la conexión a MongoDB", 
                    "No se encontraron boletas en la base de datos"
                });
                return;
            }
            
            for (DatosBoleta boleta : boletasDemo) {
            // Extraer el destino (asumimos formato "Origen - Destino")
            String[] partes = boleta.ruta.split(" - ");
            String destino = partes.length > 1 ? partes[1] : boleta.ruta;
            
            // Actualizar contadores
            pasajerosPorDestino.put(destino, pasajerosPorDestino.getOrDefault(destino, 0) + boleta.cantidadAsientos);
            boletasPorDestino.put(destino, boletasPorDestino.getOrDefault(destino, 0) + 1);
        }
        
        // Ordenar por cantidad de pasajeros (convertir a lista para ordenar)
        List<Map.Entry<String, Integer>> listaOrdenada = new ArrayList<>(pasajerosPorDestino.entrySet());
        listaOrdenada.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue())); // Orden descendente
        
        // Mostrar resultados en la tabla
        int totalPasajeros = 0;
        int totalBoletas = 0;
        int contador = 0;
        
        for (Map.Entry<String, Integer> entry : listaOrdenada) {
            contador++;
            String destino = entry.getKey();
            int pasajeros = entry.getValue();
            int boletas = boletasPorDestino.get(destino);
            
            totalPasajeros += pasajeros;
            totalBoletas += boletas;
            
            Object[] fila = {
                contador,
                "Destino: " + destino,
                pasajeros + " pasajeros",
                "Boletas: " + boletas + " | Promedio: " + 
                String.format("%.1f", (double)pasajeros/boletas) + " por boleta"
            };
            tblModel.addRow(fila);
        }
        
        // Agregar resumen
        Object[] resumen = {
            "TOTAL",
            contador + " destinos",
            totalPasajeros + " pasajeros",
            "Total boletas: " + totalBoletas + " | Periodo: Histórico completo"
        };
        tblModel.addRow(resumen);
        } catch (Exception e) {
            System.err.println("Error al consultar pasajeros por destino: " + e.getMessage());
            tblModel.addRow(new Object[] {
                "Error", 
                "Error al procesar datos", 
                e.getMessage(), 
                "Error al procesar los datos de destino"
            });
        }
    }
    
    /**
     * Consulta distribución por modelo de bus
     */
    private void consultarDistribucionBuses() {
        // Limpiar la tabla primero
        tblModel.setRowCount(0);
        
        try {
            Map<String, Integer> pasajerosPorModelo = new HashMap<>();
            Map<String, Integer> boletasPorModelo = new HashMap<>();
            Map<String, Double> ingresosPorModelo = new HashMap<>();
            
            // Verificar si tenemos datos cargados
            if (boletasDemo == null || boletasDemo.isEmpty()) {
                System.out.println("No hay datos cargados para consultar distribución de buses");
                tblModel.addRow(new Object[] {
                    "N/A", 
                    "No hay datos disponibles", 
                    "Verifique la conexión a MongoDB", 
                    "No se encontraron boletas en la base de datos"
                });
                return;
            }
        
        for (DatosBoleta boleta : boletasDemo) {
            String modeloBus = boleta.modeloBus;
            
            // Actualizar contadores
            pasajerosPorModelo.put(modeloBus, pasajerosPorModelo.getOrDefault(modeloBus, 0) + boleta.cantidadAsientos);
            boletasPorModelo.put(modeloBus, boletasPorModelo.getOrDefault(modeloBus, 0) + 1);
            ingresosPorModelo.put(modeloBus, ingresosPorModelo.getOrDefault(modeloBus, 0.0) + boleta.total);
        }
        
        // Ordenar por cantidad de pasajeros (convertir a lista para ordenar)
        List<Map.Entry<String, Integer>> listaOrdenada = new ArrayList<>(pasajerosPorModelo.entrySet());
        listaOrdenada.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue())); // Orden descendente
        
        // Mostrar resultados en la tabla
        int totalPasajeros = 0;
        int totalBoletas = 0;
        double totalIngresos = 0;
        int contador = 0;
        
        for (Map.Entry<String, Integer> entry : listaOrdenada) {
            contador++;
            String modeloBus = entry.getKey();
            int pasajeros = entry.getValue();
            int boletas = boletasPorModelo.get(modeloBus);
            double ingresos = ingresosPorModelo.get(modeloBus);
            
            totalPasajeros += pasajeros;
            totalBoletas += boletas;
            totalIngresos += ingresos;
            
            Object[] fila = {
                contador,
                "Modelo: " + modeloBus,
                pasajeros + " pasajeros",
                "Boletas: " + boletas + " | Ingresos: S/ " + String.format("%.2f", ingresos)
            };
            tblModel.addRow(fila);
        }
        
        // Agregar resumen
        Object[] resumen = {
            "TOTAL",
            contador + " modelos",
            totalPasajeros + " pasajeros",
            "Ingresos: S/ " + String.format("%.2f", totalIngresos) + " | Boletas: " + totalBoletas
        };
        tblModel.addRow(resumen);
        } catch (Exception e) {
            System.err.println("Error al consultar distribución de buses: " + e.getMessage());
            tblModel.addRow(new Object[] {
                "Error", 
                "Error al procesar datos", 
                e.getMessage(), 
                "Error al procesar los datos de buses"
            });
        }
    }
    
    /**
     * Consulta ingresos por ruta
     */
    private void consultarIngresosPorRuta() {
        // Limpiar la tabla primero
        tblModel.setRowCount(0);
        
        try {
            Map<String, Double> ingresosPorRuta = new HashMap<>();
            Map<String, Integer> pasajerosPorRuta = new HashMap<>();
            Map<String, Integer> boletasPorRuta = new HashMap<>();
            
            // Verificar si tenemos datos cargados
            if (boletasDemo == null || boletasDemo.isEmpty()) {
                System.out.println("No hay datos cargados para consultar ingresos por ruta");
                tblModel.addRow(new Object[] {
                    "N/A", 
                    "No hay datos disponibles", 
                    "Verifique la conexión a MongoDB", 
                    "No se encontraron boletas en la base de datos"
                });
                return;
            }
            
            for (DatosBoleta boleta : boletasDemo) {
            String ruta = boleta.ruta;
            
            // Actualizar contadores
            ingresosPorRuta.put(ruta, ingresosPorRuta.getOrDefault(ruta, 0.0) + boleta.total);
            pasajerosPorRuta.put(ruta, pasajerosPorRuta.getOrDefault(ruta, 0) + boleta.cantidadAsientos);
            boletasPorRuta.put(ruta, boletasPorRuta.getOrDefault(ruta, 0) + 1);
        }
        
        // Ordenar por ingresos (convertir a lista para ordenar)
        List<Map.Entry<String, Double>> listaOrdenada = new ArrayList<>(ingresosPorRuta.entrySet());
        listaOrdenada.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue())); // Orden descendente
        
        // Mostrar resultados en la tabla
        double totalIngresos = 0;
        int totalPasajeros = 0;
        int totalBoletas = 0;
        int contador = 0;
        
        for (Map.Entry<String, Double> entry : listaOrdenada) {
            contador++;
            String ruta = entry.getKey();
            double ingresos = entry.getValue();
            int pasajeros = pasajerosPorRuta.get(ruta);
            int boletas = boletasPorRuta.get(ruta);
            
            totalIngresos += ingresos;
            totalPasajeros += pasajeros;
            totalBoletas += boletas;
            
            Object[] fila = {
                contador,
                "Ruta: " + ruta,
                "S/ " + String.format("%.2f", ingresos),
                "Pasajeros: " + pasajeros + " | Boletas: " + boletas
            };
            tblModel.addRow(fila);
        }
        
        // Agregar resumen
        Object[] resumen = {
            "TOTAL",
            contador + " rutas",
            "S/ " + String.format("%.2f", totalIngresos),
            "Total pasajeros: " + totalPasajeros + " | Boletas: " + totalBoletas
        };
        tblModel.addRow(resumen);
        } catch (Exception e) {
            System.err.println("Error al consultar ingresos por ruta: " + e.getMessage());
            tblModel.addRow(new Object[] {
                "Error", 
                "Error al procesar datos", 
                "S/ 0.00", 
                "Error al procesar los datos de ingresos"
            });
        }
    }
    
    /**
     * Consulta métodos de pago más utilizados
     */
    private void consultarMetodosPago() {
        // Limpiar la tabla primero
        tblModel.setRowCount(0);
        
        try {
            Map<String, Integer> boletasPorMetodo = new HashMap<>();
            Map<String, Double> ingresosPorMetodo = new HashMap<>();
            
            // Verificar si tenemos datos cargados
            if (boletasDemo == null || boletasDemo.isEmpty()) {
                System.out.println("No hay datos cargados para consultar métodos de pago");
                tblModel.addRow(new Object[] {
                    "N/A", 
                    "No hay datos disponibles", 
                    "Verifique la conexión a MongoDB", 
                    "No se encontraron boletas en la base de datos"
                });
                return;
            }
            
            for (DatosBoleta boleta : boletasDemo) {
            String metodoPago = boleta.metodoPago;
            
            // Actualizar contadores
            boletasPorMetodo.put(metodoPago, boletasPorMetodo.getOrDefault(metodoPago, 0) + 1);
            ingresosPorMetodo.put(metodoPago, ingresosPorMetodo.getOrDefault(metodoPago, 0.0) + boleta.total);
        }
        
        // Ordenar por cantidad de boletas (convertir a lista para ordenar)
        List<Map.Entry<String, Integer>> listaOrdenada = new ArrayList<>(boletasPorMetodo.entrySet());
        listaOrdenada.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue())); // Orden descendente
        
        // Mostrar resultados en la tabla
        int totalBoletas = 0;
        double totalIngresos = 0;
        int contador = 0;
        
        for (Map.Entry<String, Integer> entry : listaOrdenada) {
            contador++;
            String metodoPago = entry.getKey();
            int boletas = entry.getValue();
            double ingresos = ingresosPorMetodo.get(metodoPago);
            
            totalBoletas += boletas;
            totalIngresos += ingresos;
            
            Object[] fila = {
                contador,
                "Método: " + metodoPago,
                boletas + " boletas",
                "Ingresos: S/ " + String.format("%.2f", ingresos) +
                " | Promedio: S/ " + String.format("%.2f", ingresos / boletas) + " por boleta"
            };
            tblModel.addRow(fila);
        }
        
        // Agregar resumen
        Object[] resumen = {
            "TOTAL",
            contador + " métodos",
            totalBoletas + " boletas",
            "Ingresos totales: S/ " + String.format("%.2f", totalIngresos)
        };
        tblModel.addRow(resumen);
        } catch (Exception e) {
            System.err.println("Error al consultar métodos de pago: " + e.getMessage());
            tblModel.addRow(new Object[] {
                "Error", 
                "Error al procesar datos", 
                "0 boletas", 
                "Error al procesar los datos de pagos"
            });
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btonEliminar;
    private javax.swing.JButton btonEliminarTodo;
    private javax.swing.JComboBox<String> cmbFiltro;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblRegister;
    private javax.swing.JTextField txtFecha;
    // End of variables declaration//GEN-END:variables
}
