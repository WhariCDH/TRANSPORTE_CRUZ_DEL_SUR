/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Jframes;
import ExpressBus.Bus;
import ExpressBus.BusEstandar;
import ExpressBus.EmpresaTransporteFacade;
import ExpressBus.MongoConnection;
import ExpressBus.Personal_General;
import ExpressBus.Ruta;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
/**
 *
 * @author EQUIPO
 */
public class ADMINISTRATIVO extends javax.swing.JInternalFrame {

    private DefaultTableModel tblModel;
    private final String[] header={"Nombre","Personal","Terminal","Bus","Ruta","Origen","Destino"};
    
    public ADMINISTRATIVO() {
        initComponents();
        panel_personal.setVisible(true);
        panel_personal1.setVisible(true);
        initTable();
        cargarDatosDesdeMongo();
        cargarOrigenes();
    }
    
    
    private void cargarOrigenes() {
        comboOrigenNuevo.removeAllItems();
        for (String origen : facade.obtenerOrigenes()) {
            comboOrigenNuevo.addItem(origen);
        }
    }
    
    private void cargarDestinos(String origenSeleccionado) {
        comboDestino.removeAllItems();
        for (String destino : facade.obtenerDestinosPorOrigen(origenSeleccionado)) {
            if (!destino.equals(origenSeleccionado)) { // Evita que destino sea igual a origen
                comboDestino.addItem(destino);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btonEliminarTodo = new javax.swing.JButton();
        btonAgregar = new javax.swing.JButton();
        btonEditar = new javax.swing.JButton();
        btonEliminar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRegister = new javax.swing.JTable();
        panel_personal = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPersonal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTerminales = new javax.swing.JTextField();
        panel_personal1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtBus = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtRuta = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboOrigenNuevo = new javax.swing.JComboBox<>();
        comboDestino = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Administracion de Personal");
        setPreferredSize(new java.awt.Dimension(900, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btonEliminarTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trash.png"))); // NOI18N
        btonEliminarTodo.setText("Eliminar todo");
        btonEliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonEliminarTodoActionPerformed(evt);
            }
        });
        getContentPane().add(btonEliminarTodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 160, 140, -1));

        btonAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/add.png"))); // NOI18N
        btonAgregar.setText("Agregar");
        btonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonAgregarActionPerformed(evt);
            }
        });
        getContentPane().add(btonAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 140, -1));

        btonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/letter.png"))); // NOI18N
        btonEditar.setText("Editar");
        btonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonEditarActionPerformed(evt);
            }
        });
        getContentPane().add(btonEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, 140, -1));

        btonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cross.png"))); // NOI18N
        btonEliminar.setText("Eliminar");
        btonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btonEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 160, 140, -1));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        tblRegister.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tblRegisterAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tblRegister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegisterMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRegister);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.6;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 210, 790, 300));

        panel_personal.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                panel_personalAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        panel_personal.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Nombre");
        panel_personal.add(jLabel1, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.insets = new java.awt.Insets(8, 28, 4, 28);
        panel_personal.add(txtNombres, gridBagConstraints);

        jLabel2.setText("Personal(Rol)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panel_personal.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.insets = new java.awt.Insets(8, 28, 4, 28);
        panel_personal.add(txtPersonal, gridBagConstraints);

        jLabel3.setText("Terminal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        panel_personal.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.insets = new java.awt.Insets(8, 28, 4, 28);
        panel_personal.add(txtTerminales, gridBagConstraints);

        getContentPane().add(panel_personal, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 260, -1));

        panel_personal1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel_personal1MouseClicked(evt);
            }
        });
        panel_personal1.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Bus Designado");
        panel_personal1.add(jLabel4, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.insets = new java.awt.Insets(8, 28, 4, 28);
        panel_personal1.add(txtBus, gridBagConstraints);

        jLabel5.setText("Ruta");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panel_personal1.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.insets = new java.awt.Insets(8, 28, 4, 28);
        panel_personal1.add(txtRuta, gridBagConstraints);

        getContentPane().add(panel_personal1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 400, -1));

        jLabel6.setText("Origen");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, -1, -1));

        jLabel7.setText("Destino");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, -1, -1));

        comboOrigenNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOrigenNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(comboOrigenNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 90, 270, -1));

        comboDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDestinoActionPerformed(evt);
            }
        });
        getContentPane().add(comboDestino, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 120, 270, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void cargarDatosDesdeMongo() {
        DefaultTableModel model = (DefaultTableModel) tblRegister.getModel();
        model.setRowCount(0); // Limpia la tabla

        MongoDatabase db = MongoConnection.getInstance().getDatabase();
        MongoCollection<Document> collection = db.getCollection("personal");
        MongoCursor<Document> cursor = collection.find().iterator();

        while (cursor.hasNext()) {
            Document doc = cursor.next();
            Object[] fila = {
                doc.getString("nombre"),
                doc.getString("tipoPersonal"),
                doc.getString("terminal"),
                doc.getString("modeloBus"),
                doc.getString("ruta"),
                doc.getString("origen"),
                doc.getString("destino")
            };
            model.addRow(fila);
        }
    }
    
    private void btonEliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonEliminarTodoActionPerformed
        /*// TODO add your handling code here:

        int filas=tblRegister.getRowCount();

        for(int i= filas - 1;i>=0; i--){

            tblModel.removeRow(i);

        }/*/
        
        // Confirmación para eliminar todos los registros
        int opcion = javax.swing.JOptionPane.showConfirmDialog(this,
            "¿Está seguro que desea eliminar TODOS los registros? Esta acción no se puede deshacer.",
            "Confirmar eliminación masiva", javax.swing.JOptionPane.YES_NO_OPTION,
            javax.swing.JOptionPane.WARNING_MESSAGE);

        if (opcion != javax.swing.JOptionPane.YES_OPTION) {
            return;
        }

        // Eliminar todos los registros de MongoDB
        MongoDatabase db = MongoConnection.getInstance().getDatabase();
        MongoCollection<Document> collection = db.getCollection("personal");
        collection.deleteMany(new Document());

        // Eliminar todos los registros de la tabla
        int filas = tblRegister.getRowCount();
        for (int i = filas - 1; i >= 0; i--) {
            tblModel.removeRow(i);
        }

        javax.swing.JOptionPane.showMessageDialog(this,
            "Se han eliminado todos los registros",
            "Éxito", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        // Limpiar campos
        txtNombres.setText("");
        txtPersonal.setText("");
        txtTerminales.setText("");
        txtBus.setText("");
        txtRuta.setText("");
    }//GEN-LAST:event_btonEliminarTodoActionPerformed
    private final EmpresaTransporteFacade facade = new EmpresaTransporteFacade();
    private void btonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonAgregarActionPerformed
        // TODO add your handling code here:
        String nombre = txtNombres.getText().trim();
        String personal = txtPersonal.getText().trim();
        String terminal = txtTerminales.getText().trim();
        String modeloBus = txtBus.getText().trim();
        String rutaStr = txtRuta.getText().trim();
        String origen = comboOrigenNuevo.getSelectedItem().toString();
        String destino = comboDestino.getSelectedItem().toString();
        // Asumiendo que txtHorario1 es el campo de destino

        // Crear objetos necesarios
        Bus bus = new BusEstandar(modeloBus, 0); // Puedes cambiar el precio si es necesario
        Ruta rutaObj = new Ruta(origen, destino, rutaStr);


        // Crear objeto Personal_General
        Personal_General empleado = facade.registrarPersonal(nombre, personal, terminal, bus, rutaObj);

        // Agregar a la tabla
        tblModel.addRow(empleado.toArray());
        DefaultTableModel model = (DefaultTableModel) tblRegister.getModel();


        // Limpiar campos
        txtNombres.setText("");
        txtPersonal.setText("");
        txtTerminales.setText("");
        txtBus.setText("");
        txtRuta.setText("");
        
    }//GEN-LAST:event_btonAgregarActionPerformed

    private void btonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonEditarActionPerformed
        /*// TODO add your handling code here:

        if (tblRegister.getSelectedRowCount()!=1) {

            return;

        }

        String nombre = txtNombres.getText();
        String personal = txtPersonal.getText();
        String terminal = txtTerminales.getText();
        String modelo = txtBus.getText();
        String ruta = txtRuta.getText();
        String origen = comboOrigenNuevo.getSelectedItem().toString();
        String destino = comboDestino.getSelectedItem().toString();;

        Bus bus = new BusEstandar(modelo, 0);
        Ruta rutaObj = new Ruta(origen, destino, ruta);

        Personal_General empleado = new Personal_General(nombre, personal, terminal,bus, rutaObj);

        int fila = tblRegister.getSelectedRow();
        tblModel.setValueAt(empleado.getNombre(), fila, 0);
        tblModel.setValueAt(empleado.getPersonal(), fila, 1);
        tblModel.setValueAt(empleado.getTerminal(), fila, 2);
        tblModel.setValueAt(empleado.getModeloBus(), fila, 3);
        tblModel.setValueAt(empleado.getRuta(), fila, 4);
        tblModel.setValueAt(empleado.getOrigen(), fila, 5);
        tblModel.setValueAt(empleado.getDestino(), fila, 6);*/
        
            // Verificar que haya una fila seleccionada
        if (tblRegister.getSelectedRowCount() != 1) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Seleccione un registro para editar",
                "Advertencia", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        String nombre = txtNombres.getText();
        String personal = txtPersonal.getText();
        String terminal = txtTerminales.getText();
        String modelo = txtBus.getText();
        String rutaStr = txtRuta.getText();
        String origen = comboOrigenNuevo.getSelectedItem().toString();
        String destino = comboDestino.getSelectedItem().toString();

        // Validar datos
        if (nombre.isEmpty() || personal.isEmpty() || terminal.isEmpty() ||
            modelo.isEmpty() || rutaStr.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Todos los campos son obligatorios",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        Bus bus = new BusEstandar(modelo, 0);
        Ruta rutaObj = new Ruta(origen, destino, rutaStr);
        Personal_General empleado = new Personal_General(nombre, personal, terminal, bus, rutaObj);

        // Obtener el documento original de la fila seleccionada
        int fila = tblRegister.getSelectedRow();
        String nombreOriginal = (String) tblModel.getValueAt(fila, 0);
        String personalOriginal = (String) tblModel.getValueAt(fila, 1);

        // Actualizar en MongoDB
        MongoDatabase db = MongoConnection.getInstance().getDatabase();
        MongoCollection<Document> collection = db.getCollection("personal");

        // Crear filtro para encontrar el documento a actualizar
        Document filtro = new Document("nombre", nombreOriginal)
                          .append("tipoPersonal", personalOriginal);

        // Crear documento con los nuevos valores
        Document nuevoDocumento = new Document("$set", new Document()
                .append("nombre", nombre)
                .append("tipoPersonal", personal)
                .append("terminal", terminal)
                .append("modeloBus", modelo)
                .append("ruta", rutaStr)
                .append("origen", origen)
                .append("destino", destino));

        // Actualizar en la base de datos
        collection.updateOne(filtro, nuevoDocumento);

        // Actualizar en la tabla
        tblModel.setValueAt(empleado.getNombre(), fila, 0);
        tblModel.setValueAt(empleado.getPersonal(), fila, 1);
        tblModel.setValueAt(empleado.getTerminal(), fila, 2);
        tblModel.setValueAt(empleado.getModeloBus(), fila, 3);
        tblModel.setValueAt(empleado.getRuta(), fila, 4);
        tblModel.setValueAt(empleado.getOrigen(), fila, 5);
        tblModel.setValueAt(empleado.getDestino(), fila, 6);

        javax.swing.JOptionPane.showMessageDialog(this,
            "Registro actualizado correctamente",
            "Éxito", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        // Limpiar campos
        txtNombres.setText("");
        txtPersonal.setText("");
        txtTerminales.setText("");
        txtBus.setText("");
        txtRuta.setText("");
    }//GEN-LAST:event_btonEditarActionPerformed

    private void btonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonEliminarActionPerformed
        /*// TODO add your handling code here:

        if (tblRegister.getSelectedRowCount() !=1) {
            return;

        }
        int fila=tblRegister.getSelectedRow();
        tblModel.removeRow(fila);*/
            if (tblRegister.getSelectedRowCount() != 1) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Seleccione un registro para eliminar",
                "Advertencia", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Confirmación para eliminar
        int opcion = javax.swing.JOptionPane.showConfirmDialog(this,
            "¿Está seguro que desea eliminar este registro?",
            "Confirmar eliminación", javax.swing.JOptionPane.YES_NO_OPTION);

        if (opcion != javax.swing.JOptionPane.YES_OPTION) {
            return;
        }

        // Obtener datos del registro seleccionado
        int fila = tblRegister.getSelectedRow();
        String nombre = (String) tblModel.getValueAt(fila, 0);
        String personal = (String) tblModel.getValueAt(fila, 1);

        // Eliminar de MongoDB
        MongoDatabase db = MongoConnection.getInstance().getDatabase();
        MongoCollection<Document> collection = db.getCollection("personal");
        Document filtro = new Document("nombre", nombre)
                          .append("tipoPersonal", personal);

        collection.deleteOne(filtro);

        // Eliminar de la tabla
        tblModel.removeRow(fila);

        javax.swing.JOptionPane.showMessageDialog(this,
            "Registro eliminado correctamente",
            "Éxito", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        // Limpiar campos
        txtNombres.setText("");
        txtPersonal.setText("");
        txtTerminales.setText("");
        txtBus.setText("");
        txtRuta.setText("");
        
    }//GEN-LAST:event_btonEliminarActionPerformed

    private void tblRegisterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegisterMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount()==2) {

            int fila=tblRegister.getSelectedRow();

            String nombre= (String ) tblModel.getValueAt(fila, 0);
            String personal= (String ) tblModel.getValueAt(fila, 1);
            String terminal= (String ) tblModel.getValueAt(fila, 2);
            String bus=(String ) tblModel.getValueAt(fila, 3);
            String ruta= (String ) tblModel.getValueAt(fila, 4);
            String origen=(String ) tblModel.getValueAt(fila, 5);
            String destino=(String ) tblModel.getValueAt(fila, 6);

            txtNombres.setText(nombre);
            txtPersonal.setText(personal);
            txtTerminales.setText(terminal);
            txtBus.setText(bus);
            txtRuta.setText(ruta);
            comboOrigenNuevo.getSelectedItem().toString();
            comboDestino.getSelectedItem().toString();

        }
    }//GEN-LAST:event_tblRegisterMouseClicked

    private void panel_personal1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_personal1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panel_personal1MouseClicked

    private void comboOrigenNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOrigenNuevoActionPerformed
        // TODO add your handling code here:
        
        String origenSeleccionado = (String) comboOrigenNuevo.getSelectedItem();
            if (origenSeleccionado != null) {
            cargarDestinos(origenSeleccionado);
        }
          
    }//GEN-LAST:event_comboOrigenNuevoActionPerformed

    private void comboDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDestinoActionPerformed

    private void tblRegisterAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tblRegisterAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_tblRegisterAncestorAdded

    private void panel_personalAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_panel_personalAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_panel_personalAncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btonAgregar;
    private javax.swing.JButton btonEditar;
    private javax.swing.JButton btonEliminar;
    private javax.swing.JButton btonEliminarTodo;
    private javax.swing.JComboBox<String> comboDestino;
    private javax.swing.JComboBox<String> comboOrigenNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panel_personal;
    private javax.swing.JPanel panel_personal1;
    private javax.swing.JTable tblRegister;
    private javax.swing.JTextField txtBus;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtPersonal;
    private javax.swing.JTextField txtRuta;
    private javax.swing.JTextField txtTerminales;
    // End of variables declaration//GEN-END:variables
    private void initTable() {
        tblModel= new  DefaultTableModel(header,0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
       
       
        };
        tblRegister.setModel(tblModel);
    }
}
