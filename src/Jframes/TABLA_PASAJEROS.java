/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Jframes;


import ExpressBus.MongoConnection;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import java.awt.Dimension;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import javax.swing.JOptionPane;
import org.bson.types.ObjectId;


/**
 *
 * @author EQUIPO
 */
public class TABLA_PASAJEROS extends javax.swing.JInternalFrame {


    private DefaultTableModel tblModel;
    private final String[] header={"ID","Nombre Pasajero","DNI","Modelo de Bus","Cantidad de Asientos","Cantidad Equipaje","Metodo Pago","Precio por Asiento","Costo Equipaje","Total","Fecha"};
    /*private final String[] header={"ID","Modelo de Bus","Cantidad de Asientos","Cantidad Equipaje","Metodo Pago","Precio por Asiento","Costo Equipaje","Total","Fecha"};*/
    public TABLA_PASAJEROS() {
        initComponents();
        initTable2();
        cargarDatosDesdeMongo();
    }
    
    
    private void cargarDatosDesdeMongo() {
        
        tblModel.setRowCount(0); // Limpia la tabla

            MongoCursor<Document> cursor = null;
        try {
            MongoDatabase db = MongoConnection.getInstance().getDatabase();
            MongoCollection<Document> collection = db.getCollection("boletas_reserva");
          
            cursor = collection.find().iterator();

            while (cursor.hasNext()) {
                Document doc = cursor.next();
                // Manejar correctamente el ID de MongoDB
                String id = "";
                if (doc.get("_id") != null) {
                    id = doc.get("_id").toString();
                }
                
                Object[] fila = {
                    id,
                    getValueAsString(doc, "nombrePasajero"),
                    getValueAsString(doc, "dniPasajero"),
                    getValueAsString(doc, "modeloBus"),
                    getValueAsString(doc, "cantidadAsientos"),
                    getValueAsString(doc, "cantidadEquipaje"),
                    getValueAsString(doc, "metodoPago"),
                    getValueAsString(doc, "precioPorAsiento"),
                    getValueAsString(doc, "costoEquipaje"),
                    getValueAsString(doc, "total"),
                    getValueAsString(doc, "fecha")
                };
                tblModel.addRow(fila);
            }
             System.out.println("Total registros cargados: " + tblModel.getRowCount());
        } catch (Exception ex) {
        // Muestra información detallada del error
            System.err.println("Error al cargar datos desde MongoDB: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            // Cierra el cursor si no es null
            if (cursor != null) {
                cursor.close();
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btonEliminarTodo = new javax.swing.JButton();
        btonAgregar = new javax.swing.JButton();
        btonEditar = new javax.swing.JButton();
        btonEliminar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRegister2 = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("Tabla de Pasajeros");
        setPreferredSize(new java.awt.Dimension(900, 500));

        btonEliminarTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trash.png"))); // NOI18N
        btonEliminarTodo.setText("Eliminar todo");
        btonEliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonEliminarTodoActionPerformed(evt);
            }
        });

        btonAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/choose.png"))); // NOI18N
        btonAgregar.setText("Actualizar");
        btonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonAgregarActionPerformed(evt);
            }
        });

        btonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/reportes1.png"))); // NOI18N
        btonEditar.setText("Reporte");
        btonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonEditarActionPerformed(evt);
            }
        });

        btonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cross.png"))); // NOI18N
        btonEliminar.setText("Eliminar");
        btonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonEliminarActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridBagLayout());

        tblRegister2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblRegister2.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tblRegister2AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tblRegister2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegister2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRegister2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.6;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btonEliminarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btonAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btonEliminar)
                    .addComponent(btonEliminarTodo)
                    .addComponent(btonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btonEliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonEliminarTodoActionPerformed
        // TODO add your handling code here:
        // Confirmar antes de eliminar todos los datos
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "¿Está seguro que desea eliminar todas las reservas?", 
            "Confirmar eliminación", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                MongoDatabase db = MongoConnection.getInstance().getDatabase();
                MongoCollection<Document> collection = db.getCollection("boletas_reserva");
                
                // Eliminar todos los documentos de la colección
                collection.deleteMany(new Document());
                
                // Limpiar la tabla
                tblModel.setRowCount(0);
                
                JOptionPane.showMessageDialog(this, "Todas las reservas han sido eliminadas exitosamente.");
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al eliminar los datos: " + ex.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btonEliminarTodoActionPerformed

    private void btonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonAgregarActionPerformed
        // TODO add your handling code here:
        cargarDatosDesdeMongo();
        JOptionPane.showMessageDialog(this, "Tabla actualizada exitosamente.");

    }//GEN-LAST:event_btonAgregarActionPerformed

    private void btonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonEditarActionPerformed
        int totalFilas = tblModel.getRowCount();
        double totalIngresos = 0;
        
        for (int i = 0; i < totalFilas; i++) {
            try {
                String totalStr = tblModel.getValueAt(i, 7).toString(); // columna Total
                if (totalStr != null && !totalStr.isEmpty()) {
                    totalIngresos += Double.parseDouble(totalStr);
                }
            } catch (NumberFormatException e) {
                // Ignorar valores no numéricos
            }
        }
        
        String reporte = "=== REPORTE DE RESERVAS ===\n\n";
        reporte += "Total de reservas: " + totalFilas + "\n";
        reporte += "Total de ingresos: S/. " + String.format("%.2f", totalIngresos) + "\n\n";
        
        JOptionPane.showMessageDialog(this, reporte, "Reporte de Reservas", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_btonEditarActionPerformed

    private void btonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonEliminarActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRegister2.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una fila para eliminar.");
            return;
        }
        
        // Obtener el ID de la fila seleccionada
        String id = tblModel.getValueAt(selectedRow, 0).toString();
        
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "¿Está seguro que desea eliminar esta reserva?", 
            "Confirmar eliminación", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Eliminar la fila de la tabla primero, independientemente de la conexión a MongoDB
                tblModel.removeRow(selectedRow);
                
                // Ahora intentar eliminar de MongoDB
                try {
                    MongoDatabase db = MongoConnection.getInstance().getDatabase();
                    MongoCollection<Document> collection = db.getCollection("boletas_reserva");
                    
                     // Verificar si el ID parece un ObjectId (tiene 24 caracteres hexadecimales)
                    if (id.matches("[0-9a-fA-F]{24}")) {
                        try {
                            // Si tiene el formato de ObjectId, intentar convertirlo
                            ObjectId objectId = new ObjectId(id);
                            Document filter = new Document("_id", objectId);
                            collection.deleteOne(filter);
                            System.out.println("Documento eliminado con ObjectId: " + objectId);
                        } catch (Exception e) {
                            // Si falla la conversión, usar el ID como string
                            Document filter = new Document("_id", id);
                            collection.deleteOne(filter);
                            System.out.println("Documento eliminado usando ID como string: " + id);
                        }
                    } else {
                        // Si no tiene formato de ObjectId, usarlo directamente como string
                        Document filter = new Document("_id", id);
                        collection.deleteOne(filter);
                        System.out.println("Documento eliminado usando ID como string: " + id);
                    }
                } catch (Exception e) {
                    // Si falla la eliminación de MongoDB, al menos la interfaz está actualizada
                    System.err.println("Error al eliminar de MongoDB: " + e.getMessage());
                    e.printStackTrace();
                }
                
                JOptionPane.showMessageDialog(this, "Reserva eliminada exitosamente.");
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al eliminar la reserva: " + ex.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btonEliminarActionPerformed

    private void tblRegister2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegister2MouseClicked
       if (evt.getClickCount() == 2) {
            int selectedRow = tblRegister2.getSelectedRow();
            if (selectedRow >= 0) {
                try {
                    // Obtener el ID del documento
                    String id = tblModel.getValueAt(selectedRow, 0).toString();
                    String nombrePasajero = tblModel.getValueAt(selectedRow, 1).toString();
                    String dniPasajero = tblModel.getValueAt(selectedRow, 2).toString();
                    
                    // Conectar a MongoDB para obtener detalles completos
                    MongoDatabase db = MongoConnection.getInstance().getDatabase();
                    MongoCollection<Document> collection = db.getCollection("boletas_reserva");
                    
                    Document filter;
                    if (id.matches("[0-9a-fA-F]{24}")) {
                        // Si tiene el formato de ObjectId, convertirlo
                        ObjectId objectId = new ObjectId(id);
                        filter = new Document("_id", objectId);
                    } else {
                        filter = new Document("_id", id);
                    }
                    
                    Document doc = collection.find(filter).first();
                    
                    if (doc != null) {
                        // Construir mensaje con todos los detalles del pasajero
                        StringBuilder detalles = new StringBuilder();
                        detalles.append("DATOS DEL PASAJERO\n");
                        detalles.append("==================\n");
                        detalles.append("Nombre: ").append(getValueAsString(doc, "nombrePasajero")).append("\n");
                        detalles.append("DNI: ").append(getValueAsString(doc, "dniPasajero")).append("\n");
                        detalles.append("Teléfono: ").append(getValueAsString(doc, "telefonoPasajero")).append("\n");
                        detalles.append("Correo: ").append(getValueAsString(doc, "correoPasajero")).append("\n\n");
                        
                        detalles.append("DETALLES DE LA RESERVA\n");
                        detalles.append("=====================\n");
                        detalles.append("Modelo de Bus: ").append(getValueAsString(doc, "modeloBus")).append("\n");
                        detalles.append("Asientos: ").append(getValueAsString(doc, "cantidadAsientos")).append("\n");
                        detalles.append("Equipaje: ").append(getValueAsString(doc, "cantidadEquipaje")).append("\n");
                        detalles.append("Método de Pago: ").append(getValueAsString(doc, "metodoPago")).append("\n");
                        detalles.append("Total: S/. ").append(getValueAsString(doc, "total")).append("\n");
                        detalles.append("Fecha: ").append(getValueAsString(doc, "fecha")).append("\n");
                        
                        // Mostrar el diálogo con los detalles
                        JOptionPane.showMessageDialog(
                            this,
                            detalles.toString(),
                            "Detalles de la Reserva - " + nombrePasajero,
                            JOptionPane.INFORMATION_MESSAGE
                        );
                    } else {
                        JOptionPane.showMessageDialog(
                            this,
                            "No se encontraron detalles adicionales para esta reserva.",
                            "Información",
                            JOptionPane.INFORMATION_MESSAGE
                        );
                    }
                    
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error al obtener detalles: " + ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                    ex.printStackTrace();
                }
            }
        } 
    }//GEN-LAST:event_tblRegister2MouseClicked

    private void tblRegister2AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tblRegister2AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_tblRegister2AncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btonAgregar;
    private javax.swing.JButton btonEditar;
    private javax.swing.JButton btonEliminar;
    private javax.swing.JButton btonEliminarTodo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblRegister2;
    // End of variables declaration//GEN-END:variables
    private void initTable2() {
        tblModel= new  DefaultTableModel(header,0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
       
       
        };
        tblRegister2.setModel(tblModel);
        tblRegister2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        /*tblRegister2.getColumnModel().getColumn(0).setPreferredWidth(100); // ID
        tblRegister2.getColumnModel().getColumn(1).setPreferredWidth(150); // Modelo Bus
        tblRegister2.getColumnModel().getColumn(7).setPreferredWidth(80);  // Total
        tblRegister2.getColumnModel().getColumn(8).setPreferredWidth(100); // Fecha*/
    }
     /**
     * Método auxiliar para obtener cualquier valor de un documento MongoDB como String
     * @param doc Documento MongoDB
     * @param key Clave a obtener
     * @return Valor como String o cadena vacía si es nulo
     */
    private String getValueAsString(Document doc, String key) {
        if (doc == null || !doc.containsKey(key) || doc.get(key) == null) {
            return "";
        }
        return doc.get(key).toString();
    }
    public void optimizarPresentacionTabla() {
        // Ajustar el tamaño del JInternalFrame para que ocupe más espacio
        setSize(new Dimension(900, 600));
        
        // Asegurarse de que el JScrollPane tenga un tamaño apropiado
        jScrollPane2.setPreferredSize(new Dimension(850, 450));
        
        // Refrescar la tabla para aplicar los cambios
        tblRegister2.repaint();
    }
}

